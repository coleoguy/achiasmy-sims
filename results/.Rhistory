library("viridis")
library("dplyr")
############################### Data Preparation ###############################
# Read in data files for each combination of meiotic type, sex chromosome,
# autosome size, and selection coefficient
setwd("/Users/knigh/Documents/GitHub/achiasmy-sims/results/")
CYS0 <- readRDS("CYS_s=0_2022-07-14.rds")
CYS0.2 <- readRDS("CYS_s=0.2_2022-07-15.rds")
CYS0.4 <- readRDS("CYS_s=0.4_2022-07-16.rds")
CYS0.6 <- readRDS("CYS_s=0.6_2022-07-17.rds")
CYS0.8 <- readRDS("CYS_s=0.8_2022-07-18.rds")
CYS1 <- readRDS("CYS_s=1_2022-07-19.rds")
CYL0 <- readRDS("CYL_s=0_2022-07-14.rds")
CYL0.2 <- readRDS("CYL_s=0.2_2022-07-15.rds")
CYL0.4 <- readRDS("CYL_s=0.4_2022-07-16.rds")
CYL0.6 <- readRDS("CYL_s=0.6_2022-07-17.rds")
CYL0.8 <- readRDS("CYL_s=0.8_2022-07-18.rds")
CYL1 <- readRDS("CYL_s=1_2022-07-19.rds")
CXS0 <- readRDS("CXS_s=0_2022-07-14.rds")
CXS0.2 <- readRDS("CXS_s=0.2_2022-07-15.rds")
CXS0.4 <- readRDS("CXS_s=0.4_2022-07-16.rds")
CXS0.6 <- readRDS("CXS_s=0.6_2022-07-17.rds")
CXS0.8 <- readRDS("CXS_s=0.8_2022-07-19.rds")
CXS1 <- readRDS("CXS_s=1_2022-07-20.rds")
CXL0 <- readRDS("CXL_s=0_2022-07-14.rds")
CXL0.2 <- readRDS("CXL_s=0.2_2022-07-15.rds")
CXL0.4 <- readRDS("CXL_s=0.4_2022-07-17.rds")
CXL0.6 <- readRDS("CXL_s=0.6_2022-07-18.rds")
CXL0.8 <- readRDS("CXL_s=0.8_2022-07-19.rds")
CXL1 <- readRDS("CXL_s=1_2022-07-20.rds")
AYS0 <- readRDS("AYS_s=0_2022-07-15.rds")
AYS0.2 <- readRDS("AYS_s=0.2_2022-07-16.rds")
AYS0.4 <- readRDS("AYS_s=0.4_2022-07-17.rds")
AYS0.6 <- readRDS("AYS_s=0.6_2022-07-18.rds")
AYS0.8 <- readRDS("AYS_s=0.8_2022-07-19.rds")
AYS1 <- readRDS("AYS_s=1_2022-07-20.rds")
AYL0 <- readRDS("AYL_s=0_2022-07-15.rds")
AYL0.2 <- readRDS("AYL_s=0.2_2022-07-16.rds")
AYL0.4 <- readRDS("AYL_s=0.4_2022-07-17.rds")
AYL0.6 <- readRDS("AYL_s=0.6_2022-07-18.rds")
AYL0.8 <- readRDS("AYL_s=0.8_2022-07-19.rds")
AYL1 <- readRDS("AYL_s=1_2022-07-20.rds")
AXS0 <- readRDS("AXS_s=0_2022-07-15.rds")
AXS0.2 <- readRDS("AXS_s=0.2_2022-07-16.rds")
AXS0.4 <- readRDS("AXS_s=0.4_2022-07-17.rds")
AXS0.6 <- readRDS("AXS_s=0.6_2022-07-18.rds")
AXS0.8 <- readRDS("AXS_s=0.8_2022-07-19.rds")
AXS1 <- readRDS("AXS_s=1_2022-07-20.rds")
AXL0 <- readRDS("AXL_s=0_2022-07-15.rds")
AXL0.2 <- readRDS("AXL_s=0.2_2022-07-16.rds")
AXL0.4 <- readRDS("AXL_s=0.4_2022-07-17.rds")
AXL0.6 <- readRDS("AXL_s=0.6_2022-07-18.rds")
AXL0.8 <- readRDS("AXL_s=0.8_2022-07-19.rds")
AXL1 <- readRDS("AXL_s=1_2022-07-20.rds")
# Create a dataframe with the frequency of fusions in the final generation
# of each INDIVIDUAL simulation
num_sims <- 1000
gen_no <- 1000
s_coeffs <- (0:5)/5
PropFusions_EachSim <- data.frame(
Simulation = rep(1:num_sims, each = 2*2*2*length(s_coeffs)),
Meiotic_Type = rep(rep(c("A", "C"), each = 2*2*length(s_coeffs)),
times = num_sims),
Sex_Chr = rep(rep(c("X", "Y"), each = 2*length(s_coeffs)), times = 2*num_sims),
Autosome_Size = rep(c("L", "S"), times = 2*2*length(s_coeffs)*num_sims),
s = rep(rep(s_coeffs, each = 2), times = 2*2*num_sims),
PropFusions = rep(0, times = 2*2*2*length(s_coeffs)*num_sims)
)
# Create dataframe in which to store avg proportion of FUSIONS at final
# generation across ALL simulations. The order of the variables within
# Meiotic_Type and Autosome_Size are arranged in a specific order to enable
# plotting later, so do not change the order
PropFusions_Avg <- data.frame(
Meiotic_Type = rep(c("A", "C"), each = 2*2*length(s_coeffs)),
Sex_Chr = rep(rep(c("X", "Y"), each = 2*length(s_coeffs)), times = 2),
Autosome_Size = rep(c("L", "S"), times = 2*2*length(s_coeffs)),
s = rep(rep(s_coeffs, each = 2), times = 4),
PropFusions_Avg = rep(0, times = 2*2*2*length(s_coeffs)),
LowerCI = rep(0, times = 2*2*2*length(s_coeffs)),
UpperCI = rep(0, times = 2*2*2*length(s_coeffs))
)
# Fill each row of the data frame with the proportion of fusions of the
# corresponding simulation
num_conditions <- 8
for(i in 1:length(s_coeffs)){
s <- s_coeffs[i]
for(cond in 1:num_conditions){
# Retrieve a unique combination of meiotic, fusion, and autosomal size
# parameters
if(cond <= 4){
meiotic_type <- "C"
}else{
meiotic_type <- "A"
}
if(cond %in% c(1, 2, 5, 6)){
fus.type <- "Y"
}else{
fus.type <- "X"
}
if(cond%%2){
size <- "S"
}else{
size <- "L"
}
# Prep dataframe name based on current parameters
dataname <- paste(c(meiotic_type, fus.type, size, s), collapse = "")
print(dataname)
# For each simulation run under the current combination of parameters,
# retrieve the proportion of fusions at the FINAL generation
for(sim in 1:num_sims){
# Retrieve and store the row of the fusion proportion dataframe
# corresponding to the current simulation and set of parameters
current_row <- which(PropFusions_EachSim$Simulation == sim &
PropFusions_EachSim$Meiotic_Type == meiotic_type &
PropFusions_EachSim$Sex_Chr == fus.type &
PropFusions_EachSim$Autosome_Size == size &
PropFusions_EachSim$s == s)
# Retrieve and store the proportion of fusions at the final generation of
# the current simulation and dataframe
prop_fusions <- eval(parse(text = paste(dataname, "[[", sim, "]]",
sep = "")))[gen_no]
PropFusions_EachSim$PropFusions[current_row] <- prop_fusions
}
# Calculate and store the average proportion of fusions across all
# simulations as well as the lower and upper confidence intervals for this
# current set of conditions
# First, average the proportion of fusions at final generation for all
# simulations run under the current set of parameters
all_props <- PropFusions_EachSim$PropFusions[
PropFusions_EachSim$Meiotic_Type == meiotic_type &
PropFusions_EachSim$Sex_Chr == fus.type &
PropFusions_EachSim$Autosome_Size == size &
PropFusions_EachSim$s == s]
avg_props <- sum(all_props)/num_sims
# Store average proportion of fusions across all simulations which were
# run under the current set of parameters
cur_pars <- which(PropFusions_Avg$Meiotic_Type == meiotic_type &
PropFusions_Avg$Sex_Chr == fus.type &
PropFusions_Avg$Autosome_Size == size &
PropFusions_Avg$s == s)
PropFusions_Avg$PropFusions_Avg[cur_pars] <- avg_props
# Finally, use the avg proportion of fusions at final generation  and the
# standard error of the mean to calculate the upper and lower 95% Bayesian
# confidence intervals for the count of fixations
PropFusions_Avg$LowerCI[cur_pars] <- avg_props - 1.96*(sd(all_props)/sqrt(4))
PropFusions_Avg$UpperCI[cur_pars] <- avg_props + 1.96*(sd(all_props)/sqrt(4))
}
}
# Create dataframe where non-meiotic conditions are merged into a single
# condition
Q1 <- data.frame(
Meiotic_Type = PropFusions_EachSim$Meiotic_Type,
Parameters = unlist(PropFusions_EachSim[,3:5]),
PropFusions = PropFusions_EachSim$PropFusions
)
Q1
PropFusions_EachSim[,3:5]
unlist(PropFusions_EachSim[,3:5])
as.vector(PropFusions_EachSim[,3:5])
apply(PropFusions_EachSim[,3:5], paste)
?apply
apply(PropFusions_EachSim[,3:5], MARGIN = 1, FUN = paste)
apply(PropFusions_EachSim[,3:5], MARGIN = 1, FUN = paste, collapse = "")
# Create dataframe where non-meiotic conditions are merged into a single
# set of parameters
Q1 <- data.frame(
Meiotic_Type = PropFusions_EachSim$Meiotic_Type,
Parameters = apply(PropFusions_EachSim[,3:5], MARGIN = 1, FUN = paste,
collapse = ""),
PropFusions = PropFusions_EachSim$PropFusions
)
View(Q1)
# Create dataframe where parameters are merged together
Q1 <- data.frame(
Parameters = apply(PropFusions_EachSim[,2:5], MARGIN = 1, FUN = paste,
collapse = ""),
PropFusions = PropFusions_EachSim$PropFusions
)
View(Q1)
TukeyHSD(aov(lm(Q1$PropFusions ~ Q1$Parameters)))
# Create dataframe where parameters are merged together
stat_df <- data.frame(
Parameters = apply(PropFusions_EachSim[,2:5], MARGIN = 1, FUN = paste,
collapse = ""),
PropFusions = PropFusions_EachSim$PropFusions
)
# Run ANOVA to compare all sets of parameters
all_tests <- TukeyHSD(aov(lm(stat_df$PropFusions ~ stat_df$Parameters)))
all_tests
all_tests$`stat_df$Parameters`
names(all_tests$`stat_df$Parameters`)
class(all_tests$`stat_df$Parameters`)
all_tests[[1]]
# Run ANOVA to compare all sets of parameters
all_tests <- TukeyHSD(aov(lm(stat_df$PropFusions ~ stat_df$Parameters)))[[1]]
class(all_tests)
all_tests[1]
dimnames(all_tests)
dimnames(all_tests)[[1]]
################################## Question 1 ##################################
# Retain only the p-values for achiasmy-chiasmy comparisons where all other
# parameters are held constant
pars <- dimnames(all_tests)[[1]]
pars
library("stringr")
Q1 <- data.frame()
length(pars)
row = 1
pars[row]
substr(pars[row], start = 1, stop = 1))
substr(pars[row], start = 1, stop = 1)
grepl("-", pars[row])
grep("-", pars[row])
which("-" %in% pars[row])
"-" %in% pars[row]
?grep
str_detect(pars[row], "-")
str_find(pars[row], "-")
str_which(pars[row], "-")
pars[row]
str_locate(pars[row], "-")
str_locate(pars[row], "A")
str_locate(pars[row], "C")
!is.na(str_locate(pars[row], "C"))
!is.na(str_locate(pars[row], "C")[1])
!is.na(str_locate(pars[row], "A")[1])
substr(pars[row], start = 2, stop = str_locate(pars[row], "-"))
substr(pars[row], start = 2, stop = str_locate(pars[row], "-") - 1)
nchar(pars[row])
substr(pars[row], start = str_locate(pars[row], "-"), stop = nchar(pars[row]))
(substr(pars[row], start = 2, stop = str_locate(pars[row], "-") - 1) ==
substr(pars[row], start = str_locate(pars[row], "-") + 1,
stop = nchar(pars[row]))
)
substr(pars[row], start = str_locate(pars[row], "-") + 1,
stop = nchar(pars[row])
)
substr(pars[row], start = 2, stop = str_locate(pars[row], "-") - 1)
substr(pars[row], start = 1, stop = str_locate(pars[row], "-") - 1)
substr(pars[row], start = str_locate(pars[row], "-") + 1,
stop = nchar(pars[row]))
substr(pars[row], start = 2, stop = str_locate(pars[row], "-") - 1)
substr(pars[row], start = str_locate(pars[row], "-") + 2,
stop = nchar(pars[row]))
pars
row = 998
pars[row]
substr(pars[row], start = 2, stop = str_locate(pars[row], "-") - 1) ==
substr(pars[row], start = str_locate(pars[row], "-") + 2,
stop = nchar(pars[row]))
all_tests[row]
row
all_tests
all_tests[,1:4]
all_tests[1,1:4]
pars[row]
data.frame(pars[row], all_tests[row, 4])
################################## Question 1 ##################################
# Retain only the p-values for achiasmy-chiasmy comparisons where all other
# parameters are held constant
pars <- dimnames(all_tests)[[1]]
Q1 <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(Q1) <- c("Parameters", "P_Value")
for(row in 1:length(pars)){
# If this is an achiasmy-chiasmy comparison BUT all other parameters are
# constant, add to the Question 1 dataframe
if(!is.na(str_locate(pars[row], "A")[1]) &
!is.na(str_locate(pars[row], "C")[1]) &
(substr(pars[row], start = 2, stop = str_locate(pars[row], "-") - 1) ==
substr(pars[row], start = str_locate(pars[row], "-") + 2,
stop = nchar(pars[row])))){
Q1 <- rbind(Q1, data.frame(
Parameters = pars[row],
P_Value = all_tests[row, 4])
)
}
}
Q1
substr(pars[row], start = 1, stop = 1)
substr(pars[row], start = str_locate(pars[row], "-") + 2,
stop = str_locate(pars[row], "-") + 2)
substr(pars[row], start = 1, stop = 2)
substr(pars[row], start = str_locate(pars[row], "-") + 1,
stop = str_locate(pars[row], "-") + 2)
pars[row]
substr(pars[row], start = 4, stop = str_locate(pars[row], "-"))
substr(pars[row], start = 4, stop = str_locate(pars[row], "-") - 1)
str_locate(pars[row], "-") + 1
(substr(pars[row], start = 4, stop = str_locate(pars[row], "-") - 1) ==
substr(pars[row], start = str_locate(pars[row], "-") + 4,
stop = nchar(pars[row])))
substr(pars[row], start = 4, stop = str_locate(pars[row], "-") - 1)
substr(pars[row], start = str_locate(pars[row], "-") + 4,
stop = nchar(pars[row]))
################################## Question 2 ##################################
# Retain only the p-values for large-small comparsions where all other
# parameters are held constant
Q2 <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(Q2) <- c("Parameters", "P_Value")
for(row in 1:length(pars)){
# If this is an large-small comparison BUT all other parameters are
# constant, add to the Question 2 dataframe
if(!is.na(str_locate(pars[row], "L")[1]) &
!is.na(str_locate(pars[row], "S")[1]) &
(substr(pars[row], start = 1, stop = 2) ==
substr(pars[row], start = str_locate(pars[row], "-") + 1,
stop = str_locate(pars[row], "-") + 2)) &
(substr(pars[row], start = 4, stop = str_locate(pars[row], "-") - 1) ==
substr(pars[row], start = str_locate(pars[row], "-") + 4,
stop = nchar(pars[row])))){
Q2 <- rbind(Q2, data.frame(
Parameters = pars[row],
P_Value = all_tests[row, 4])
)
}
}
View(Q2)
