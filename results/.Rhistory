# Visualize DFE
setwd("~/GitHub/achiasmy-sims/results")
# Visualize DFE
setwd("~Documents/GitHub/achiasmy-sims/results")
pwd
getcwd
# Visualize DFE
setwd("~Users/Documents/GitHub/achiasmy-sims/results")
getwd
getwd()
# Visualize DFE
setwd("C:/Users/knigh/OneDrive/Documents/GitHub/achiasmy-sims/results")
# Visualize DFE
setwd("C:/Users/knigh/Documents/GitHub/achiasmy-sims/results")
load("C:/Users/knigh/Documents/GitHub/achiasmy-sims/results/results.young.RData")
View(all.results.young)
load("C:/Users/knigh/Documents/GitHub/achiasmy-sims/results/results.old.RData")
View(all.results.young)
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
hist(dfe)
plot(dfe)
density(dfe)
plot(density(dfe))
dfe <- rgamma(5000, shape = .28, scale=113)
dfe
0.2-1
dfe <- rgamma(5000, shape = .7, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .2, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .15, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .28, scale=50)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .28, scale=50)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .15, scale=50)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .28, scale=250)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
# We want the mean DFE to be less horrible
dfe <- rgamma(5000, shape = .28, scale=113)
dfe
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe
dfe <- dfe-1
dfe
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-0.8
plot(density(dfe))
dfe <- rgamma(5000, shape = .35, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-0.8
plot(density(dfe))
source(functions.aneuploidy.R)
source("../scripts/functions.aneuploidy.R")
dfe1 <- rgamma(5000, shape = .35, scale=113)
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-0.8
plot(density(dfe))
dfe <- rgamma(5000, shape = .35, scale=113)
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-0.8
plot(density(dfe))
# Overwrite get.pars() to have DFE with fewer extremely deleterious mutations
get.pars <- function(N=NULL,
s.ant=NULL,
site.sdr=NULL,
site.sal=NULL,
site.ach=NULL,
mut.rate=NULL,
h.ant=NULL,
chromosome=NULL,
aneuploidy.rate=NULL,
parb = NULL){ #first value in par boundary
# set chromosome to have mutation occur on
if(is.null(chromosome)) chromosome <- "Y"
# number of sites on sex chromosome
sites <- 100
# population size
if(is.null(N)) N <- 500
# architecture
if(is.null(site.sdr)) site.sdr <- 5  # the SDR will have alleles of 0 and 1 representing X and Y resp.
if(is.null(site.sal)) site.sal <- 10 # 0 good for females 1 good for males, site 50 also used
if(is.null(site.ach)) site.ach <- 100 #site 60 used also
if(is.null(parb)) parb <- 10 #region of PAR from parb-100
# crossover the X chromosomes is about 197 centimorgans long
# as such we should expect an average of two crossovers in our
# model this would mean that the cM distance between loci should
# be .02 this leads to an average of 1.94 crossovers per chromosome
site.dist <- .02
# we want the chance to unlink the achiasmatic mutation
# from the sex chromosome so we will have a seperate
# linkage factor that can be between 0 or 0.5 with 0.5
# representing autosomal and <0.5 sex linked
dist.ach <- .5
#### Explanation of mutation rate choice ####
# to maintain inference power to humans and other
# real genomes we want a mutation rate that will
# provide the correct number of mutations for an
# x chromosome that is "real" to do this lets pattern
# things after the human X chromosome. which has 1588410
# bp of exonic DNA.
# CITE: Sakharkar, M.K., Chow, V.T. and Kangueane, P.,
# 2004. Distributions of exons and introns in the human genome.
# In silico biology, 4(4), pp.387-393.
# We expect the germline exome mutation
# rate to be on the order of 1.45 X 10-8  per bp per year
#CITE: Scally, A., The mutation rate in human evolution and demographic inference. 2016 Current opinion
# in genetics & development, 41, pp.36-43.
# CITE: Narasimhan VM, Rahbari R, Scally A, Wuster A, Mason D, Xue Y, Wright J, Trembath RC,
# Maher ER, van Heel DA, et al.: A direct multi-generational estimate of
# the human mutation rate from autozygous segments seen in thousands of
# parentally related individuals. bioRxiv 2016.
# if we take these numbers and then apply a generation time of 25 years
# we can us a binomial distribution to find the number of mutations that
# individuals will contain:
# the prob argument is created by multiplying the annual mutation rate
# by a generation time of 25y plus times two since we are dealing with diploids
#### Explanation of mutation rate choice ####
# normal and realistic 1.45e-08
if(is.null(mut.rate)) mut.rate <- 1.45e-8
mut.rate <- mut.rate * 2 #generation time and diploid accounted for
# distribution of mutational effects to create something realistic
# we will use a compound normal distribution to describe the value of
# s where fitness is equal to 1+s
#previously used dfe from functions.R
# dfe <- rexp(5000,rate=3.5)-1
# values less than -1 are not meaninful
#dfe <- dfe[dfe<=1]
#dfe <- rexp(5000,rate=3.5)-1
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-0.8
#hist(dfe)
#sum(dfe <= -.99)/length(dfe)
#sum(dfe >= -.01)/length(dfe)
# strength of selection on sexually antagonistic locus
if(is.null(s.ant)) s.ant <- 0.5
# genetic architecture of the sexually antagonistic locus
if(is.null(h.ant)) h.ant <- 0.5
# rate of aneuploidy in males
if(is.null(aneuploidy.rate)) aneuploidy.rate <- 0.1
pars <- list(N,
sites,
site.dist,
site.sdr,
site.sal,
site.ach,
dist.ach,
h.ant,
s.ant,
dfe,
mut.rate,
chromosome,
aneuploidy.rate,
parb)
names(pars) <- c("N",
"sites",
"site.dist",
"site.sdr",
"site.sal",
"site.ach",
"dist.ach",
"h.ant",
"s.ant",
"dfe",
"mut.rate",
"chromosome",
"aneuploidy.rate",
"parb")
return(pars)
}
library(doParallel)
library(parallel)
no_cores <- detectCores(logical = TRUE)
cl <- makeCluster(no_cores-1)
registerDoParallel(cl)
mut.rates <- c(1.45e-8,
1.45e-9,
1.45e-10,
1.45e-11,
1.45e-12)
s.ant = .5
h.ant= 0.5
N <- 1000
gens <- 500
iter <- 1000
chroms <- c("X","Y","A")
positions <- c(99,99,100)
all.results.young <- vector(length=5, mode="list")
names(all.results.young) <- chroms
# k cycles through chromosomes and positions of achiasmatic mutation
for(k in 1:3){
print(paste("running", chroms[k], "chromosome model"))
# set up container for results
results.time <- vector(length=length(mut.rates), mode="list")
names(results.time) <- mut.rates
# loops through and tests each mutation rate
for(j in 1:length(mut.rates)){
print(paste("runnning mutation rate:", j, "of", length(mut.rates)))
pars <- get.pars(N = N,
s.ant = s.ant,
h.ant= h.ant,
site.sdr = 5,
site.sal = 95,
# line to change for aneuploidy = prob of
# a aneuploidy event in males
aneuploidy.rate <- 0,
#81 in aneuploidy/ old chrom, 10 in young
parb = 10,
site.ach = positions[k],
mut.rate = mut.rates[j],
chromosome = chroms[k]) #1.45e-8
starting.pop <- get.initial.pop(pars)
x <- foreach(m=1:iter, .combine = "rbind") %dopar%{
time.table <- c()
pop <- starting.pop
segregating <- T
counter <- 1
while(segregating){
pop <- generation(pop, pars)
cur.freq <- get.freq.ach(pop, pars)
time.table[counter] <- cur.freq
if(counter == gens) segregating <- F
if(cur.freq == 1){
time.table[length(time.table):gens] <- 1
segregating <- F
}
if(counter %% 10 == 0) pop <- achMut(pop, pars)
counter <- counter + 1
}
time.table
}
results.time[[j]] <- x
}
all.results.young[[k]] <- results.time
}
save(all.results.young,file = "DFEedits_all.results.young")
library("doParallel")
install.packages("doParallel")
library("doParallel")
library("parallel")
no_cores <- detectCores(logical = TRUE)
cl <- makeCluster(no_cores-1)
registerDoParallel(cl)
mut.rates <- c(1.45e-8,
1.45e-9,
1.45e-10,
1.45e-11,
1.45e-12)
s.ant = .5
h.ant= 0.5
N <- 1000
gens <- 500
iter <- 1000
chroms <- c("X","Y","A")
positions <- c(99,99,100)
all.results.young <- vector(length=5, mode="list")
names(all.results.young) <- chroms
# k cycles through chromosomes and positions of achiasmatic mutation
for(k in 1:3){
print(paste("running", chroms[k], "chromosome model"))
# set up container for results
results.time <- vector(length=length(mut.rates), mode="list")
names(results.time) <- mut.rates
# loops through and tests each mutation rate
for(j in 1:length(mut.rates)){
print(paste("runnning mutation rate:", j, "of", length(mut.rates)))
pars <- get.pars(N = N,
s.ant = s.ant,
h.ant= h.ant,
site.sdr = 5,
site.sal = 95,
# line to change for aneuploidy = prob of
# a aneuploidy event in males
aneuploidy.rate <- 0,
#81 in aneuploidy/ old chrom, 10 in young
parb = 10,
site.ach = positions[k],
mut.rate = mut.rates[j],
chromosome = chroms[k]) #1.45e-8
starting.pop <- get.initial.pop(pars)
x <- foreach(m=1:iter, .combine = "rbind") %dopar%{
time.table <- c()
pop <- starting.pop
segregating <- T
counter <- 1
while(segregating){
pop <- generation(pop, pars)
cur.freq <- get.freq.ach(pop, pars)
time.table[counter] <- cur.freq
if(counter == gens) segregating <- F
if(cur.freq == 1){
time.table[length(time.table):gens] <- 1
segregating <- F
}
if(counter %% 10 == 0) pop <- achMut(pop, pars)
counter <- counter + 1
}
time.table
}
results.time[[j]] <- x
}
all.results.young[[k]] <- results.time
}
save(all.results.young,file = "DFEedits_all.results.young")
no_cores <- detectCores(logical = TRUE)
cl <- makeCluster(no_cores-1)
registerDoParallel(cl)
mut.rates <- c(1.45e-8,
1.45e-9,
1.45e-10,
1.45e-11,
1.45e-12)
s.ant = .5
h.ant= 0.5
N <- 1000
gens <- 500
iter <- 1000
chroms <- c("X","Y","A")
positions <- c(99,99,100)
all.results.young <- vector(length=5, mode="list")
names(all.results.young) <- chroms
# k cycles through chromosomes and positions of achiasmatic mutation
for(k in 1:3){
print(paste("running", chroms[k], "chromosome model"))
# set up container for results
results.time <- vector(length=length(mut.rates), mode="list")
names(results.time) <- mut.rates
# loops through and tests each mutation rate
for(j in 1:length(mut.rates)){
print(paste("runnning mutation rate:", j, "of", length(mut.rates)))
pars <- get.pars(N = N,
s.ant = s.ant,
h.ant= h.ant,
site.sdr = 5,
site.sal = 95,
# line to change for aneuploidy = prob of
# a aneuploidy event in males
aneuploidy.rate <- 0,
#81 in aneuploidy/ old chrom, 10 in young
parb = 10,
site.ach = positions[k],
mut.rate = mut.rates[j],
chromosome = chroms[k]) #1.45e-8
starting.pop <- get.initial.pop(pars)
x <- foreach(m=1:iter, .combine = "rbind") %dopar%{
time.table <- c()
pop <- starting.pop
segregating <- T
counter <- 1
while(segregating){
pop <- generation(pop, pars)
cur.freq <- get.freq.ach(pop, pars)
time.table[counter] <- cur.freq
if(counter == gens) segregating <- F
if(cur.freq == 1){
time.table[length(time.table):gens] <- 1
segregating <- F
}
if(counter %% 10 == 0) pop <- achMut(pop, pars)
counter <- counter + 1
}
time.table
}
results.time[[j]] <- x
}
all.results.young[[k]] <- results.time
}
save(all.results.young,file = "DFEedits_all.results.young")
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
dfe <- rgamma(5000, shape = .28, scale=113)
plot(density(dfe))
hist(dfe)
hist(dfe[dfe<50])
hist(dfe[dfe<10])
hist(dfe[dfe<1])
dfe <- rgamma(5000, shape = .20, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
hist(dfe[dfe<1])
dfe <- rgamma(5000, shape = .20, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
hist(dfe[dfe<10])
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
plot(density(dfe))
hist(dfe[dfe<10])
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
dfe <- dfe-1
hist(dfe[dfe<1])
################################### Adjust DFE #################################
# We want the mean DFE to have fewer extremely deleterious alleles
dfe <- rgamma(5000, shape = .28, scale=113)
hist(dfe[dfe<1])
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe
hist(dfe)
dfe <- 1-dfe
hist(dfe)
dfe <- dfe-1
hist(dfe)
hist(dfe[dfe==50])
hist(dfe[dfe<1], breaks = 50)
# 1587926 bp of exonic DNA in human X Chromosome
hit.indiv <- rbinom(n=pars$N,size=1587926, prob=pars$mut.rate)
sum(hit.indiv)
sum(hit.indiv > 1)
