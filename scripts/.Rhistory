# For each generation in "gen_no"...
for(gen in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(pop_size, gen_no, s, PARb)
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
sexes <- rep("fem",N)
sexes
N = length(pop)
sexes <- rep("fem",N)
sexes
for(i in 1:length(sexes)){
if(pop[[i]][2,13]){
sexes[i] <- "mal"
}
}
sexes
pop[[i]][2,13]
pop[2,13]
pop
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount += 1
}
}
TotalMales = MaleCount/length(pop)
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount = MaleCount + 1
}
}
TotalMales = MaleCount/length(pop)
MaleCount
MaleCount = 0
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount = MaleCount + 1
}
}
TotalMales = MaleCount/length(pop)
TotalMales
pop
pop[[i]][2,13]
length(pop)
MaleCount = 0
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount = MaleCount + 1
}
}
MaleCount
TotalMales = MaleCount/length(pop)
TotalMales
gametes$eggs[e]
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
gametes
View(gametes)
gametes[["sperm"]]
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
SexRec
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
gametes <- vector(mode="list",length=2)
names(gametes) <- c("eggs","sperm")
gametes
i
i = 1
# Pick 3 random sites OTHER than 13, 36, and 61 in...
# PAR ((PARb+1):24)
# Autosome I (27:49)
# Autosome II (52-99)
# ... at which recombination occurs (recombination CANNOT occur at first or
# final locus of a chromosome, so these loci are excluded)
SexRec <- sample((PARb+1):24, 1)
Chr1Rec <- sample(27:49, 1)
Chr2Rec <- sample(52:99, 1)
pop[[parents$Dads[i]]]
# 1 make random starting genomes
# Input the number of genomes, output a list where each entry is a genome
GetPop <- function(N){
pop <- vector(mode = "list", length = N)
for(i in 1:N){
# Set all general fitness loci equal to 1
pop[[i]] <- matrix(rep(1, 200), nrow = 2, ncol = 100)
# Set each SDL to 1 or 0 with prob of 0.5, because 50% chance of being male
# or female, but make it impossible to have 2 Y chromosomes
pop[[i]][1,13] <- 0
pop[[i]][2,13] <- sample(0:1, size = 1, replace = F, prob = rep(0.5,2))
# TODO Should SAL have equal probability of being male or female benefit?
pop[[i]][,36] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
pop[[i]][,61] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
}
return(pop)
}
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, PARb){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(gen in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(pop_size, gen_no, s, PARb)
gen
Evolve(pop_size, 5, s, PARb)
load("C:/Users/knigh/Documents/GitHub/achiasmy-sims/results/results.young.RData")
View(all.results.young)
names(all.results.young)
all.results.young$X
resY <- all.results.young$Y
# Results for when mutation rate is 10^-8
resY08 <- resY$`1.45e-08`
View(resY08)
plot(resY08[1,])
plot(resY08[1,], type = "line")
?plot
plot(resY08[1,], type = "line",ylim=c(0,1))
plot(resY08[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele")
plot(resY10[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele")
# Results for when mutation rate is 10^-10
resY10 <- resY$`1.45e-10`
plot(resY10[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele")
# Plot EVERY simulation for
plot(resY08[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele")
for(i in 2:nrow(resY08)){
lines(y = resY08[i,], x = 1:500)
}
?rainbow
col.vec <- rainbow(500)
col.vec
# Plot EVERY simulation for
col.vec <- rainbow(500)
plot(resY08[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resY08)){
lines(y = resY08[i,], x = 1:500, col = col.vec[i])
}
# Plot EVERY simulation for mutation rate 10^-8
library(viridis)
# Plot EVERY simulation for mutation rate 10^-8
library("viridis")
# Plot EVERY simulation for mutation rate 10^-8
library(viridisLite)
col.vec <- viridis(500)
col.vec
plot(resY08[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resY08)){
lines(y = resY08[i,], x = 1:500, col = col.vec[i])
}
# Plot for mutation rate 10^-10 on Y chr
plot(resY10[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resY10)){
lines(y = resY10[i,], x = 1:500, col = col.vec[i])
}
resY12 <- resY$`1.45e-12`
resY12
# Plot for mutation rate 10^-12 on Y chr
plot(resY12[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resY10)){
lines(y = resY10[i,], x = 1:500, col = col.vec[i])
}
plot(colMeans(resY08))
plot(colMeans(resY08), alpha = 0.5, pch = 16)
plot(colMeans(resY08), alpha = 0.5, pch = 16, cex = 0.5)
plot(colMeans(resY08), pch = 16, cex = 0.5, ylim = c(0,1))
plot(colMeans(resY10), pch = 16, cex = 0.5, ylim = c(0,1))
plot(colMeans(resY12), pch = 16, cex = 0.5, ylim = c(0,1))
# Plot for mutation rate 10^-12 on Y chr
plot(resY12[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resY10)){
lines(y = resY10[i,], x = 1:500, col = col.vec[i])
}
resY08[,500]
resY08[500,]
sum(resY08[500,]==1)
propFixedY08 <- sum(resY08[500,]==1)/500
propFixedY08
propFixedY10 <- sum(resY10[500,]==1)/500
propFixedY10
propFixedY12 <- sum(resY12[500,]==1)/500
propFixedY12
# Visualize proportion fixed over time
fixationY12 <- c()
for(i in 1:500){
fixationY12 <- sum(resY12[,i]==1)/500
}
fixationY12
# Visualize proportion fixed over time
fixationY12 <- c()
for(i in 1:500){
fixationY12[i] <- sum(resY12[,i]==1)/500
}
fixationY12
############################### X Chromosome ###################################
resX <- all.results.young$X
# Plot for mutation rate 10^-12 on X chr
plot(resX12[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
resX12 <- resX$`1.45e-12`
# Plot for mutation rate 10^-12 on X chr
plot(resX12[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resX10)){
lines(y = resX10[i,], x = 1:500, col = col.vec[i])
}
############################### X Chromosome ###################################
resX <- all.results.young$X
resX12 <- resX$`1.45e-12`
# Plot for mutation rate 10^-12 on X chr
plot(resX12[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
# Plot for mutation rate 10^-12 on X chr
plot(resX12[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resX12)){
lines(y = resX12[i,], x = 1:500, col = col.vec[i])
}
plot(colMeans(resX12), pch = 16, cex = 0.5, ylim = c(0,1))
############################### X Chromosome ###################################
resX <- all.results.young$X
resX12 <- resX$`1.45e-12`
# Plot for mutation rate 10^-12 on X chr
plot(resX12[1,], type = "line", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
for(i in 2:nrow(resX12)){
lines(y = resX12[i,], x = 1:500, col = col.vec[i])
}
plot(colMeans(resX12), pch = 16, cex = 0.5, ylim = c(0,1))
propFixedX12 <- sum(resX12[500,]==1)/500
fixationX12 <- c()
for(i in 1:500){
fixationX12[i] <- sum(resX12[,i]==1)/500
}
# Visualize proportion fixed over time for all three chromosome classes at the
# highest mutation rate
fixationX <- c()
fixationY <- c()
fixationA <- c()
for(i in 1:500){
fixationX[i] <- sum(resX12[,i]==1)/500
fixationY[i] <- sum(resY12[,i]==1)/500
fixationA[i] <- sum(all.results.young$A$`1.45e-12`[,i]==1)/500
}
fixationA
i
fixationX[i]
plot(fixationX, type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
lines(y = fixationY, x = 1:500, col = col.vec[2])
lines(y = fixationA, x = 1:500, col = col.vec[3])
plot(fixationX, type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Achiasmatic Allele",
col = col.vec[1])
lines(y = fixationY, x = 1:500, col = "blue")
lines(y = fixationA, x = 1:500, col = "red")
source("C:/Users/knigh/Documents/GitHub/achiasmy-sims/scripts/sizes.R")
source("C:/Users/knigh/Documents/GitHub/achiasmy-sims/scripts/sizes.R")
i
i=1
pop[[i]][, 25]
?sample
sample(0:2, size = 2, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, replace = T, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, replace = T, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, replace = T, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, replace = T, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, replace = T, prob = c(0.8,0.1,0.1))
sample(0:2, size = 2, replace = T, prob = c(0.8,0.1,0.1))
pop[[i]][1, 25] == 0
sample(0:2, size = 2, replace = T, prob = c(0.8,0.1,0.1))
# Initialize list of matrices
results <- vector(mode = "list", length = 5)
results
names(results) <- c("FusionLocus","SDR","SAL36","SAL61","TotalFitness")
results
?matrix
gen_no
pop_size
matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results <- vector(mode = "list", length = 5)
names(results) <- c("FusionLocus","SDR","SAL36","SAL61","TotalFitness")
results$FusionLocus <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$SDR <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$SAL36 <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$SAL61 <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$TotalFitness <- matrix(nrow = gen_no, ncol = pop_size,
dimnames = list(1:gen_no, 1:pop_size))
results
pop
gen_rows
# Create iterator for the TWO rows corresponding to the current population
gen_rows <- 1:2
gen_rows
gen_rows <- gen_rows + 2
gen_rows
# Create iterator for the TWO rows corresponding to the current population
gen_rows <- 1:2
pop
pop[,25]
i
pop[[i]]
pop[[i]][,25]
results$TotalFitness[gen,]
gen = 1
results$TotalFitness[gen,]
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
fits
fits
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, chiasm){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Initialize list of matrices
# For each matrix...
# Rows = Generations
# Columns = Individuals
results <- vector(mode = "list", length = 5)
names(results) <- c("FusionLocus","SDR","SAL36","SAL61","TotalFitness")
results$FusionLocus <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$SDR <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$SAL36 <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$SAL61 <- matrix(nrow = 2*gen_no, ncol = pop_size,
dimnames = list(rep(c("X","X/Y"), gen_no), 1:pop_size))
results$TotalFitness <- matrix(nrow = gen_no, ncol = pop_size,
dimnames = list(1:gen_no, 1:pop_size))
# Create iterator for the TWO rows corresponding to the current population
gen_rows <- 1:2
# For each generation in "gen_no"...
for(gen in 1:gen_no){
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
results$TotalFitness[gen,] <- fits
for(i in 1:pop_size){
results$SDR[gen_rows, i] <- pop[[i]][,13]
results$FusionLocus[gen_rows, i] <- pop[[i]][,25]
results$SAL36[gen_rows, i] <- pop[[i]][,36]
results$SAL61[gen_rows, i] <- pop[[i]][,61]
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 2
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(results)
}
Evolve(1000,100,0.1,T)
Evolve(1000,10,0.1,T)
print("\n")
x <- Evolve(1000,10,0.1,T)
View(x)
x[["FusionLocus"]]
foo <- x$FusionLocus
View(foo)
foo <- x$SDR
rowSums(foo)
sum(foo[2,])
foo[2,]
foo <- x$SAL36
View(foo)
foo <- x$TotalFitness
rowSums(foo)
# Run simulation multiple times, storing output of each run as a new element in
# list
runs <- 1000
AchiasmaticResults <- vector(mode = list, length = runs)
?list
AchiasmaticResults <- vector(mode = "list", length = runs)
ChiasmaticResults <- vector(mode = "list", length = runs)
for(sim in 1:runs){
print(" ")
print(paste(c("Simulation: ", sim)))
AchiasmaticResults[[sim]] <- Evolve(1000,100,0.1,F)
ChiasmaticResults[[sim]] <- Evolve(1000,100,0.1,T)
}
for(sim in 1:runs){
print(" ")
print(paste(c("Simulation: ", sim)))
AchiasmaticResults[[sim]] <- Evolve(1000,10,0.1,F)
ChiasmaticResults[[sim]] <- Evolve(1000,10,0.1,T)
}
View(Chr2Gametes)
View(results)
View(AchiasmaticResults)
save(AchiasmaticResults, "AchiasmaticResults.rds")
saveRDS(AchiasmaticResults, "AchiasmaticResults.rds")
saveRDS(ChiasmaticResults, "ChiasmaticResults.rds")
