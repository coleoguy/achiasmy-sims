gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- as.numeric(MiracleOfLife(gametes))
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
1000GenPop <- Evolve(100, 1000, 0.25, 10)
pop_size <- 100
gen_no <- 1000
s <- 0.1
PARb <- 20
pop <- GetPop(pop_size)
dfe <- GetDFE()
pop
dfe
# Mutate the starting population
pop <- as.numeric(ActofGod(pop, dfe))
# Mutate the starting population
pop <- ActofGod(pop, dfe)
pop
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
fits
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
parents
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
gametes
# Breed the parents
pop <- as.numeric(MiracleOfLife(gametes))
# Breed the parents
pop <- MiracleOfLife(gametes)
pop
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, PARb){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(i in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(100,1000,0.1,20)
i
# Get a new population
pop <- GetPop(pop_size)
pop
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
pop
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
Evolve(pop_size, gen_no, s, PARb)
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, PARb){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(gen in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(pop_size, gen_no, s, PARb)
mut_sites
i
hit
hit[i]
hit[i]
if(hit[i]){print("Registered as true")}
hit[i] != 0
# 6 lay down mutations
# mut_rate = mutation rate
# pop = list of N genomes
ActofGod <- function(pop, dfe){
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= length(pop),
prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
# Iterate through each individual
for(i in 1:length(pop)){
# If this is a mutated individual, sample the indicated number of sites to
# be mutated from the non-SDL, non-SAL
if(hit[i] != 0){
mut_sites <- sample((1:100)[-c(13,36,61)], size = hit[i], replace = F)
# At each site to be mutated, replace the value of a random homolog with
# a randomly-selected value from dfe
pop[[i]][sample(1:2, size = 1, replace = F), mut_sites] <-
sample(dfe, size = hit[i])
}
}
return(pop)
}
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, PARb){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(gen in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(pop_size, gen_no, s, PARb)
i
mut_sites
vector(mut_sites)
c(mut_sites)
# 6 lay down mutations
# mut_rate = mutation rate
# pop = list of N genomes
ActofGod <- function(pop, dfe){
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= length(pop),
prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
# Iterate through each individual
for(i in 1:length(pop)){
# If this is a mutated individual, sample the indicated number of sites to
# be mutated from the non-SDL, non-SAL
if(hit[i] != 0){
mut_sites <- sample((1:100)[-c(13,36,61)], size = hit[i], replace = F)
# At each site to be mutated, replace the value of a random homolog with
# a randomly-selected value from dfe
for(m in 1:length(mut_sites)){
pop[[i]][sample(1:2, size = 1, replace = F), mut_sites[m]] <-
sample(dfe, 1)
}
}
}
return(pop)
}
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, PARb){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(gen in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(pop_size, gen_no, s, PARb)
m
pop
dfe
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= length(pop),
prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
hit
i
hit[i] != 0
# Iterate through each individual
for(i in 1:length(pop)){
# If this is a mutated individual, sample the indicated number of sites to
# be mutated from the non-SDL, non-SAL
if(hit[i] != 0){
mut_sites <- sample((1:100)[-c(13,36,61)], size = hit[i], replace = F)
# At each site to be mutated, replace the value of a random homolog with
# a randomly-selected value from dfe
for(m in 1:length(mut_sites)){
pop[[i]][sample(1:2, size = 1, replace = F), mut_sites[m]] <-
sample(dfe, 1)
}
}
}
i
m
mut_sites
hit[i]
pop[[i]]
sample(1:2, size = 1, replace = F)
mut_sites[m]
pop[[i]][sample(1:2, size = 1, replace = F), mut_sites[m]]
38
as.integer(sample(1:2, size = 1, replace = F))
pop[i]
pop
# Get a new population
pop <- GetPop(pop_size)
pop
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
pop
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
fits
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
parents
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
gametes
# Breed the parents
pop <- MiracleOfLife(gametes)
pop
# 7 make next gen
# gametes = List of strings describing the haplotypes of available eggs and
# sperm where each locus' fitness value is separated by a comma
# newgen = List of matrices describing each of the new individuals
MiracleOfLife <- function(gametes){
# New generation should be same size as number of couples
newgen <- vector(mode = "list", length = length(gametes$eggs))
# Until list of gametes is empty, sample a new mom and dad gamete and fuse
# together into a 2X100 matrix, adding to population
for(i in 1:length(newgen)){
# pick a mom and dad at random from the mating pool
e <- sample(1:length(gametes$eggs), 1)
s <- sample(1:length(gametes$sperm), 1)
# sex
newgen[[i]] <- matrix(as.numeric(c(strsplit(gametes$eggs[e], ",")[[1]],
strsplit(gametes$sperm[s], ",")[[1]])),
nrow = 2, byrow = T)
gametes$eggs <- gametes$eggs[-e]
gametes$sperm <- gametes$sperm[-s]
}
return(newgen)
}
pop
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
pop
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, PARb){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(gen in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(pop_size, gen_no, s, PARb)
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
sexes <- rep("fem",N)
sexes
N = length(pop)
sexes <- rep("fem",N)
sexes
for(i in 1:length(sexes)){
if(pop[[i]][2,13]){
sexes[i] <- "mal"
}
}
sexes
pop[[i]][2,13]
pop[2,13]
pop
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount += 1
}
}
TotalMales = MaleCount/length(pop)
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount = MaleCount + 1
}
}
TotalMales = MaleCount/length(pop)
MaleCount
MaleCount = 0
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount = MaleCount + 1
}
}
TotalMales = MaleCount/length(pop)
TotalMales
pop
pop[[i]][2,13]
length(pop)
MaleCount = 0
for(i in 1:length(pop)){
if(pop[[i]][2,13]){
MaleCount = MaleCount + 1
}
}
MaleCount
TotalMales = MaleCount/length(pop)
TotalMales
gametes$eggs[e]
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
gametes
View(gametes)
gametes[["sperm"]]
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
SexRec
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
gametes <- vector(mode="list",length=2)
names(gametes) <- c("eggs","sperm")
gametes
i
i = 1
# Pick 3 random sites OTHER than 13, 36, and 61 in...
# PAR ((PARb+1):24)
# Autosome I (27:49)
# Autosome II (52-99)
# ... at which recombination occurs (recombination CANNOT occur at first or
# final locus of a chromosome, so these loci are excluded)
SexRec <- sample((PARb+1):24, 1)
Chr1Rec <- sample(27:49, 1)
Chr2Rec <- sample(52:99, 1)
pop[[parents$Dads[i]]]
# 1 make random starting genomes
# Input the number of genomes, output a list where each entry is a genome
GetPop <- function(N){
pop <- vector(mode = "list", length = N)
for(i in 1:N){
# Set all general fitness loci equal to 1
pop[[i]] <- matrix(rep(1, 200), nrow = 2, ncol = 100)
# Set each SDL to 1 or 0 with prob of 0.5, because 50% chance of being male
# or female, but make it impossible to have 2 Y chromosomes
pop[[i]][1,13] <- 0
pop[[i]][2,13] <- sample(0:1, size = 1, replace = F, prob = rep(0.5,2))
# TODO Should SAL have equal probability of being male or female benefit?
pop[[i]][,36] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
pop[[i]][,61] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
}
return(pop)
}
# Runs the simulation on "pop_size" number of individuals for "gen_no"
# generations with an SAL selection coefficient of "s" and a PAR beginning locus
# of "PARb" and output the final population
Evolve <- function(pop_size, gen_no, s, PARb){
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(gen in 1:gen_no){
# Mutate the starting population
pop <- ActofGod(pop, dfe)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, PARb)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Continue to next round of mutation
next
}
# Output final genome after this many generations
return(pop)
}
Evolve(pop_size, gen_no, s, PARb)
gen
Evolve(pop_size, 5, s, PARb)
