source("functions.R")
setwd("D:/Dropbox/projects/achiasmatic.evolve/scripts")
source("functions.R")
library(doMC)
Install.packages(“parallel”)
Install.packages(“doParallel”)
install.packages(“parallel”)
install.packages(“doParallel”)
install.packages("doParallel")
library(doParallel)
library(parallel)
install.packages("installr")
check.for.updates.R(notify_user = TRUE, GUI = TRUE,
page_with_download_url = "https://cran.rstudio.com/bin/windows/base/",
pat = "R-[0-9.]+.+-win\\.exe")
library(installr)
N = 100
N = 50
pop <- vector(length = N, mode = list)
pop <- vector(mode = list, length = N)
vector(mode = list, length = N)
pop <- vector(mode = "list", length = N)
pop
matrix(nrow = 2, ncol = 100)
matrix(rep(1, 200), nrow = 2, ncol = 100)
pop <- vector(mode = "list", length = N)
pop
for(i in 1:N){
pop[[i]] <- matrix(rep(1, 200), nrow = 2, ncol = 100)
}
pop
pop[[i]]
pop[[i]][13,2]
pop[[i]][2,]
pop[[i]][2,13]
pop[[i]][,13]
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
sample(c(0,0,0,1), size = 2, replace = F)
pop[[i]][,13] <- sample(c(0,0,0,1), size = 2, replace = F)
pop <- vector(mode = "list", length = N)
for(i in 1:N){
# Set all general fitness loci equal to 1
pop[[i]] <- matrix(rep(1, 200), nrow = 2, ncol = 100)
# Set each SDL to 1 or 0 with prob of 0.5, because 50% chance of being male
# or female, but make it impossible to have 2 Y chromosomes
pop[[i]][,13] <- sample(c(0,0,0,1), size = 2, replace = F)
# TODO Should SAL have equal probability of being male or female benefit?
pop[[i]][,36] <- sample(0:1, size = 2, replace = T, prob = 0.5)
pop[[i]][,61] <- sample(0:1, size = 2, replace = T, prob = 0.5)
}
# TODO Should SAL have equal probability of being male or female benefit?
pop[[i]][,36] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
# 1 make random starting genomes
# Input the number of genomes, output a list where each entry is a genome
GetPop <- function(N){
pop <- vector(mode = "list", length = N)
for(i in 1:N){
# Set all general fitness loci equal to 1
pop[[i]] <- matrix(rep(1, 200), nrow = 2, ncol = 100)
# Set each SDL to 1 or 0 with prob of 0.5, because 50% chance of being male
# or female, but make it impossible to have 2 Y chromosomes
pop[[i]][,13] <- sample(c(0,0,0,1), size = 2, replace = F)
# TODO Should SAL have equal probability of being male or female benefit?
pop[[i]][,36] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
pop[[i]][,61] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
}
return(pop)
}
GetPop(1)
x <- matrix(0:4, nrow = 2, ncol = 2)
x <- matrix(1:4, nrow = 2, ncol = 2)
x
colSums(x)
i
# Initialize a vector of fitness values for the loci of an individual AND a
# vector of fitness values for all individuals in the population
locus_fits <- vector(mode = "numeric", length = 99)
locus_fits
locus_fits <- colSums(pop[[i]][,-c(13,36,61)])
locus_fits
pop[[i]][,-c(13,36,61)]
pop[[i]][,13]
1 %in% pop[[i]][,13]
?switch
switch(1:3)
switch(1, print(a))
switch(1, print("A"))
switch(00, 00 = "F", 01 = "het", 11 = "M")
switch(x, FF = "F", MF = "het", MM = "M")
x = FF
x = "FF"
switch(x, FF = "F", MF = "het", MM = "M")
x = 00
switch(x, 00 = "F", MF = "het", MM = "M")
switch(x, "00" = "F", MF = "het", MM = "M")
pop[[i]][,36]
c(0,0)
switch(pop[[i]][,36], c(0,0) = "F", MF = "het", MM = "M")
sum(pop[[i]][,36])
sum(pop[[i]][,36]) == 0
sum(pop[[i]][,36]) == 2
s36 = 0.5
1 - 0.5*s36
locus_fits <- append(locus_fits, 1 - 0.5*s36)
locus_fits
prod(locus_fits)
pop <- vector(mode = "list", length = 1)
pop
pop[[1]] <- matrix(rep(0.5, 200), nrow = 2, ncol = 100)
# Create a vector of averaged fitness values of ALL homologous loci,
# excluding the SDL and SAL
locus_fits <- colSums(pop[[i]][,-c(13,36,61)])/2
pop[[1]] <- matrix(rep(0.5, 200), nrow = 2, ncol = 100)
# If the individual is a male...
if(1 %in% pop[[i]][,13]){
# If SAL36 genotype is 00, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 0){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 11, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 0){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
# If the individual is a female...
}else{
# If SAL36 genotype is 11, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 2){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 00, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 2){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
}
pop[[1]]
# Initialize a vector of fitness values for all individuals in the population
pop_fits <- vector(mode = "numeric", length = length(pop))
pop_fits
# Iterate through each individual in the population
for(i in 1:length(pop)){
# Create a vector of averaged fitness values of ALL homologous loci,
# excluding the SDL and SAL
locus_fits <- colSums(pop[[i]][,-c(13,36,61)])/2
# If the individual is a male...
if(1 %in% pop[[i]][,13]){
# If SAL36 genotype is 00, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 0){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 11, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 0){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
# If the individual is a female...
}else{
# If SAL36 genotype is 11, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 2){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 00, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 2){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
}
# Take product of fitness vector and add to vector of population fitness
# values
pop_fits[[i]] <- prod(locus_fits)
}
s61 = 0.5
# 2 assess fitness
# pop = list of genomes from GetPop()
# s36 = selection coefficient on sexually-antagonistic locus at 36
# s61 = selection coefficient on sexually-antagonistic locus at 61
GetFit <- function(pop, s36, s61){
# Initialize a vector of fitness values for all individuals in the population
pop_fits <- vector(mode = "numeric", length = length(pop))
# Iterate through each individual in the population
for(i in 1:length(pop)){
# Create a vector of averaged fitness values of ALL homologous loci,
# excluding the SDL and SAL
locus_fits <- colSums(pop[[i]][,-c(13,36,61)])/2
# If the individual is a male...
if(1 %in% pop[[i]][,13]){
# If SAL36 genotype is 00, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 0){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 11, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 0){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
# If the individual is a female...
}else{
# If SAL36 genotype is 11, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 2){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 00, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 2){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
}
# Take product of fitness vector and add to vector of population fitness
# values
pop_fits[[i]] <- prod(locus_fits)
}
# Return vector of fitness values of each individual
return(pop_fits)
}
pop_fits
# 1 make random starting genomes
# Input the number of genomes, output a list where each entry is a genome
GetPop <- function(N){
pop <- vector(mode = "list", length = N)
for(i in 1:N){
# Set all general fitness loci equal to 1
pop[[i]] <- matrix(rep(1, 200), nrow = 2, ncol = 100)
# Set each SDL to 1 or 0 with prob of 0.5, because 50% chance of being male
# or female, but make it impossible to have 2 Y chromosomes
pop[[i]][,13] <- sample(c(0,0,0,1), size = 2, replace = F)
# TODO Should SAL have equal probability of being male or female benefit?
pop[[i]][,36] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
pop[[i]][,61] <- sample(0:1, size = 2, replace = T, prob = rep(0.5,2))
}
return(pop)
}
pop <- GetPop(1)
pop
0.75*0.75
# 2 assess fitness
# pop = list of genomes from GetPop()
# s36 = selection coefficient on sexually-antagonistic locus at 36
# s61 = selection coefficient on sexually-antagonistic locus at 61
GetFit <- function(pop, s36, s61){
# Initialize a vector of fitness values for all individuals in the population
pop_fits <- vector(mode = "numeric", length = length(pop))
# Iterate through each individual in the population
for(i in 1:length(pop)){
# Create a vector of averaged fitness values of ALL homologous loci,
# excluding the SDL and SAL
locus_fits <- colSums(pop[[i]][,-c(13,36,61)])/2
# If the individual is a male...
if(1 %in% pop[[i]][,13]){
# If SAL36 genotype is 00, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 0){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 11, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 0){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
# If the individual is a female...
}else{
# If SAL36 genotype is 11, append 1-s36 to vector
if(sum(pop[[i]][,36]) == 2){
locus_fits <- append(locus_fits, 1 - s36)
# If SAL36 genotype is 01, append 1 - 0.5*s36 to vector
}else if(sum(pop[[i]][,36]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s36)
}
# If SAL36 genotype is 00, do nothing (appending 1 would not change product)
# Repeat for SAL61
if(sum(pop[[i]][,61]) == 2){
locus_fits <- append(locus_fits, 1 - s61)
}else if(sum(pop[[i]][,61]) == 1){
locus_fits <- append(locus_fits, 1 - 0.5*s61)
}
}
# Take product of fitness vector and add to vector of population fitness
# values
pop_fits[[i]] <- prod(locus_fits)
}
# Return vector of fitness values of each individual
return(pop_fits)
}
GetFit(pop, 0.5, 0.5)
dfe <- rgamma(5000, shape = .28, scale=113)
dfe
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe
# values less than -1 are not meaningful
dfe[dfe>1] <- 1.2
dfe
dfe <- 1-dfe
dfe
hist(dfe)
foo <- GetPop(100)
foo <- foo[[1]]
View(foo)
mut_rate
mut_rate = 0.01
mut_rate
sample(0:1, prob = c(1-mut_rate, mut_rate))
?sample
prob = c(1-mut_rate, mut_rate)
prob
?rbinom
i = 1
pop[[i]]
ncol(pop[[i]])
mut_sites <- rbinom(size = ncol(pop[[i]]), prob = mut_rate)
mut_rate
# Iterate through each individual in the population
# Determine the number of mutations to occur in that individual according
# to the mutation rate
mut_sites <- rbinom(n = ncol(pop[[i]]), size = ncol(pop[[i]]),
prob = mut_rate)
mut_sites
prod(c(2,2,2))
1.45*10^-8
help(rbinom)
rbinom(n=1, size=10,
prob = 1.45*10^-8)
rbinom(n=1, size=10,
prob = 1.45*10^-8)
rbinom(n=10, size=1,
prob = 1.45*10^-8)
rbinom(n=1, size=1587000,
prob = 1.45*10^-8)
rbinom(n=1, size=1587000,
prob = 1.45*10^-8)
rbinom(n=1, size=1587000,
prob = 1.45*10^-8)
rbinom(n=1, size=1587000,
prob = 1.45*10^-8)
rbinom(n=1, size=1587000,
prob = 1.45*10^-8)
rbinom(n=1000, size=1587000,
prob = 1.45*10^-8)->foo
hist(foo)
sum(foo==1)
sum(foo==2)
rbinom(n=1000, size=4*1587000,
prob = 1.45*10^-8)->foo
hist(foo)
sum(foo==1)
sum(foo==2)
rbinom(n=10000, size=4*1587000,
prob = 1.45*10^-8)->foo
table(foo)
rbinom(n=100000, size=4*1587000,
prob = 1.45*10^-8)->foo
as.data.frame(table)foo
as.data.frame(table(foo))
as.data.frame(table(foo))/100000
sample(0:3, times= N, probs=0.91148, 0.08430, 0.00411, 0.00011)
sample(0:3, times= N, probs=c(0.91148, 0.08430, 0.00411, 0.00011))
sample(0:3, size= N, probs=c(0.91148, 0.08430, 0.00411, 0.00011))
sample(0:3, size= N, prob=c(0.91148, 0.08430, 0.00411, 0.00011))
sample(0:3, size= N, prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
pop
length(pop)
rbinom(n=100000, size=4*1587000,
prob = 1.45*10^-8)
c(1:12,14:35,37:60,62:100)
?sample
hit[i]
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= N, prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
hit
i
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= length(pop), prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
hit
if(hit[i])
{print("true")}
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= length(pop), prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
hit
pop <- GetPop(50)
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= length(pop), prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
hit
sample(1:2, size = 1, replace = F)
hit[i]
mut_sites <- sample(c(1:12,14:35,37:60,62:100), size = 2, replace = F)
mut_sites
pop[[i]][sample(1:2, size = 1, replace = F), mut_sites]
?sample
dfe
sample(dfe, size = hit[i])
if(3)
{print("true")}
sample(dfe, size = 3)
# 6 lay down mutations
# mut_rate = mutation rate
# pop = list of N genomes
ActofGod <- function(pop, mut_rate, dfe){
# Pick the individuals who get mutations, as well as the number of mutations
# each mutated individual gets.
# Probabilities of each number of mutations were derived from the following code:
# as.data.frame(table(rbinom(n=100000, size=4*1587000,prob = 1.45*10^-8)))/100000
hit <- sample(0:3, size= length(pop),
prob=c(0.91148, 0.08430, 0.00411, 0.00011),replace=T)
# Iterate through each individual
for(i in 1:length(pop)){
# If this is a mutated individual, sample the indicated number of sites to
# be mutated from the non-SDL, non-SAL
if(hit[i]){
mut_sites <- sample(c(1:100-c(13,36,61)), size = hit[i], replace = F)
# At each site to be mutated, replace the value of a random homolog with
# a randomly-selected value from dfe
pop[[i]][sample(1:2, size = 1, replace = F), mut_sites] <-
sample(dfe, size = hit[i])
}
}
return(pop)
}
gametes <- vector(mode="list",length=2)
names(gametes) <- c("eggs","sperm")
sample(0:1, size = 1, replace = F, prob = rep(0.5,2))
sexes=="fem"
sexes <- rep("fem",length(pop))
for(i in 1:N){
if(pop[[i]][2,13]){
sexes[i] <- "mal"
}
}
sexes=="fem"
1:N
(1:N)[sexes=="fem"]
GetParents <- function(pop, fits){
sexes <- rep("fem",length(pop))
for(i in 1:N){
if(pop[[i]][2,13]){
sexes[i] <- "mal"
}
}
moms <- sample((1:N)[sexes=="fem"], prob=fits[sexes=="fem"],
size=length(pop)/2, replace = T)
dads <- sample((1:N)[sexes=="mal"], prob=fits[sexes=="mal"],
size=length(pop)/2, replace = T)
return(list(moms,dads))
}
GetParents <- function(pop, fits, N){
sexes <- rep("fem",length(pop))
for(i in 1:N){
if(pop[[i]][2,13]){
sexes[i] <- "mal"
}
}
moms <- sample((1:N)[sexes=="fem"], prob=fits[sexes=="fem"],
size=length(pop)/2, replace = T)
dads <- sample((1:N)[sexes=="mal"], prob=fits[sexes=="mal"],
size=length(pop)/2, replace = T)
return(list(moms,dads))
}
