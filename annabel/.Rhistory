# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
}
sim = 2
print(paste("Simulation: ", sim, collapse = ""))
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Create iterator for the FOUR rows corresponding to the current generation
gen_rows <- 1:4
# For each generation in "gen_no"...
for(gen in 1:gen_no){
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
}
num_sims <- 2
pop_size <- 10
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
# Initialize list of matrices
# For each matrix...
# Rows = Generations
# Columns = Individuals
results <- matrix(nrow = 4*gen_no, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no), 1:pop_size))
for(sim in 1:num_sims){
print(paste("Simulation: ", sim, collapse = ""))
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Create iterator for the FOUR rows corresponding to the current generation
gen_rows <- 1:4
# For each generation in "gen_no"...
for(gen in 1:gen_no){
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
}
}
print(paste("Simulation: ", sim, collapse = ""))
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Create iterator for the FOUR rows corresponding to the current generation
gen_rows <- 1:4
gen
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Create iterator for the FOUR rows corresponding to the current generation
gen_rows <- 1:4
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
gen
gen = 2
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
sim
# Initialize list of matrices
# For each matrix...
# Rows = Generations
# Columns = Individuals
results <- matrix(nrow = 4*gen_no, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no), 1:pop_size))
print(paste("Simulation: ", sim, collapse = ""))
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Create iterator for the FOUR rows corresponding to the current generation
gen_rows <- 1:4
gen
gen = 1
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
gen = 2
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
gen = 3
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
gen = 4
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
gen = 5
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add loci and fitnesses to corresponding generation in output
for(i in 1:pop_size){
results[gen_rows, i] <- c(pop[[i]][,13], pop[[i]][,25])
}
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next two generation's rows
gen_rows <- gen_rows + 4
sim = 2
# Get a new population
pop <- GetPop(pop_size)
# Get a distribution of fitness effects
dfe <- GetDFE()
# Create iterator for the FOUR rows corresponding to the current generation
gen_rows <- 1:4
gen = 1
source("functions.R")
num_sims <- 2
pop_size <- 10
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
num_sims <- 2
pop_size <- 10
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
num_sims <- 2
pop_size <- 10
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
num_sims <- 2
pop_size <- 10
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
source("functions.R")
num_sims <- 2
pop_size <- 10
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
num_sims <- 2
pop_size <- 1000
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
num_sims <- 2
pop_size <- 1000
source("functions.R")
num_sims <- 2
pop_size <- 1000
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
num_sims <- 2
pop_size <- 1000
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- matrix(nrow = 4*gen_no*num_sims, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no*num_sims), 1:pop_size))
results
source("functions.R")
num_sims <- 2
pop_size <- 1000
gen_no <- 5
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 0.5
fus.large <- F
results <- Evolve(num_sims, pop_size, gen_no, s, chiasm, fus.type, mu, fus.large)
View(results)
#### test matrix additions
# Initialize matrix to store final results
# Rows = Generation/SImulation combos
# Columns = Individuals
results <- matrix(nrow = 4*gen_no*num_sims, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no*num_sims), 1:pop_size))
# Create iterator for the FOUR rows corresponding to the current gensim combo
gen_sims <- 1:4
for(sim in 1:num_sims){
print(paste("Simulation: ", sim, collapse = ""))
for(gen in 1:gen_no){
print(paste(c("Generation: ", gen), collapse = ""))
for(i in 1:pop_size){
results[gen_sims, i] <- rep(paste(sim, ":", gen, collapse = ""), 4)
}
# Move to next gen/sim combo
gen_sims <- gen_sims + 4
}
}
rep(paste(c(sim, ":", gen), collapse = ""), 4)
#### test matrix additions
# Initialize matrix to store final results
# Rows = Generation/SImulation combos
# Columns = Individuals
results <- matrix(nrow = 4*gen_no*num_sims, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no*num_sims), 1:pop_size))
# Create iterator for the FOUR rows corresponding to the current gensim combo
gen_sims <- 1:4
for(sim in 1:num_sims){
print(paste("Simulation: ", sim, collapse = ""))
for(gen in 1:gen_no){
print(paste(c("Generation: ", gen), collapse = ""))
for(i in 1:pop_size){
results[gen_sims, i] <- rep(paste(c(sim, ":", gen), collapse = ""), 4)
}
# Move to next gen/sim combo
gen_sims <- gen_sims + 4
}
}
View(results)
library(viridisLite)
library(ggplot2)
setwd("/Users/knigh/Documents/GitHub/achiasmy-sims/annabel/")
CYS_LmuHs.res <- readRDS("LmuHs_CYS_06-07-22.rds")
############################## General Parameters ##############################
# Number of simulations must be known a priori
num_sims <- 25
col.vec <- viridis(num_sims)
# Number of generations is number of rows in a matrix divided by 4*num_sims
num_gens <- nrow(CYS_HmuLs.res)/(4*num_sims)
# Number of individuals is number of columns in a matrix
num_indv <- ncol(CYS_HmuLs.res)
# Create matrices to store the counts and proportions of fusions of each
# simulation (row) at each generation (column)
CYS_HmuLs.count <- CYS_HmuLs.prop <- CYS_LmuHs.count <- CYS_LmuHs.prop <-
matrix(nrow = num_sims, ncol = num_gens)
Y.count <- 0
# Number of generations is number of rows in a matrix divided by 4*num_sims
num_gens <- nrow(CYS_LmuHs.res)/(4*num_sims)
# Number of individuals is number of columns in a matrix
num_indv <- ncol(CYS_LmuHs.res)
# Create matrices to store the counts and proportions of fusions of each
# simulation (row) at each generation (column)
CYS_HmuLs.count <- CYS_HmuLs.prop <- CYS_LmuHs.count <- CYS_LmuHs.prop <-
matrix(nrow = num_sims, ncol = num_gens)
Y.count <- 0
rows <- 1:4
for(sim in 1:num_sims){
print(paste(c("Sim: ", sim), collapse = ""))
for(gen in 1:num_gens){
# For High mu Low s simulation...
# Get count of all Y chr with fusions
#CYS_HmuLs.count[sim, gen] <- sum(CYS_HmuLs.res[rows[4],] > 0)
# Get count of all Y chromosomes
#Y.count <- sum(CYS_HmuLs.res[rows[2],])
# Get proportion of Y chr with fusions
#CYS_HmuLs.prop[sim, gen] <- CYS_HmuLs.count[sim, gen]/Y.count
# Repeat for Low mu, High s simulation
CYS_LmuHs.count[sim, gen] <- sum(CYS_LmuHs.res[rows[4],] > 0)
Y.count <- sum(CYS_LmuHs.res[rows[2],])
CYS_LmuHs.prop[sim, gen] <- CYS_LmuHs.count[sim, gen]/Y.count
# Get rows for next set
rows <- rows + 4
}
}
plot(CYS_LmuHs.prop[1,], type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Fusions",
main = "Chiasmatic Y Low mu High s",
col = col.vec[1])
for(i in 2:num_sims){
lines(y = CYS_LmuHs.prop[i, ], x = 1:num_gens, col = col.vec[i])
}
# Read in data from running simulations where...
# 1. Males are chiasmatic
# 2. Fusions can only occur between Y chromosomes and small (S) autosomes
CYS_HmuLs.res <- readRDS("HmuLs_CYS_06-07-22.rds")
CYS_LmuHs.res <- readRDS("LmuHs_CYS_06-07-22.rds")
############################## General Parameters ##############################
# Number of simulations must be known a priori
num_sims <- 25
col.vec <- viridis(num_sims)
# Number of generations is number of rows in a matrix divided by 4*num_sims
num_gens <- nrow(CYS_LmuHs.res)/(4*num_sims)
# Number of individuals is number of columns in a matrix
num_indv <- ncol(CYS_LmuHs.res)
# Create matrices to store the counts and proportions of fusions of each
# simulation (row) at each generation (column)
CYS_HmuLs.count <- CYS_HmuLs.prop <- CYS_LmuHs.count <- CYS_LmuHs.prop <-
matrix(nrow = num_sims, ncol = num_gens)
Y.count <- 0
rows <- 1:4
for(sim in 1:num_sims){
print(paste(c("Sim: ", sim), collapse = ""))
for(gen in 1:num_gens){
# For High mu Low s simulation...
# Get count of all Y chr with fusions
CYS_HmuLs.count[sim, gen] <- sum(CYS_HmuLs.res[rows[4],] > 0)
# Get count of all Y chromosomes
Y.count <- sum(CYS_HmuLs.res[rows[2],])
# Get proportion of Y chr with fusions
CYS_HmuLs.prop[sim, gen] <- CYS_HmuLs.count[sim, gen]/Y.count
# Repeat for Low mu, High s simulation
CYS_LmuHs.count[sim, gen] <- sum(CYS_LmuHs.res[rows[4],] > 0)
Y.count <- sum(CYS_LmuHs.res[rows[2],])
CYS_LmuHs.prop[sim, gen] <- CYS_LmuHs.count[sim, gen]/Y.count
# Get rows for next set
rows <- rows + 4
}
}
# Plot fixation patterns Over generations for each
plot(CYS_HmuLs.prop[1,], type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Fusions",
main = "Chiasmatic Y High mu Low s",
col = col.vec[1])
for(i in 2:num_sims){
lines(y = CYS_HmuLs.prop[i, ], x = 1:num_gens, col = col.vec[i])
}
plot(CYS_LmuHs.prop[1,], type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Fusions",
main = "Chiasmatic Y Low mu High s",
col = col.vec[1])
for(i in 2:num_sims){
lines(y = CYS_LmuHs.prop[i, ], x = 1:num_gens, col = col.vec[i])
}
